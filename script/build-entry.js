var fs = require("fs");
var render = require("json-templater/string");
var uppercamelcase = require("uppercamelcase");
var path = require("path");
var endOfLine = require("os").EOL;
const { targets } = require("./utils");
var OUTPUT_PATH = path.join(__dirname, "../src/index.ts");
var IMPORT_TEMPLATE =
  "import { default as ${{name}} } from '../packages/sticky/src/index';";
var EXPORT_TEMPLATE = "export const {{name}} = ${{name}}";
var INSTALL_COMPONENT_TEMPLATE = "{{name}}";
var MAIN_TEMPLATE = `/* Automatically generated by './script/build-entry.js' */

import { VueConstructor } from "vue";
{{include}}


const directives = [
{{install}}
];

export const install = function(Vue: VueConstructor, opts = {}) {
  

  directives.forEach(component => {
    Vue.directive(component.name, component.directive);
  });

  

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}
export default {
  version: '{{version}}',
  install,
  {{list}}
};
`;
var ImportComponentTemplate = [];
var exportComponentTemplate = [];
var installTemplate = [];
// var listTemplate = [];

targets.forEach((name) => {
  var componentName = uppercamelcase(name);

  ImportComponentTemplate.push(
    render(IMPORT_TEMPLATE, {
      name: componentName,
      package: name,
    })
  );
  exportComponentTemplate.push(
    render(EXPORT_TEMPLATE, {
      name: componentName,
      package: name,
    })
  );

  installTemplate.push(
    render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name,
    })
  );
});

var template = render(MAIN_TEMPLATE, {
  include:
    ImportComponentTemplate.join(endOfLine) +
    endOfLine +
    exportComponentTemplate.join(endOfLine),
  install: installTemplate.join("," + endOfLine),
  version: process.env.VERSION || require("../package.json").version,
  list: installTemplate.join("," + endOfLine),
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log("[build entry] DONE:", OUTPUT_PATH);
